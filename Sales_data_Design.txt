CREATE DATABASE retail; -- CREATING DATABASE NAMED retial
USE retail;  -- SELECTING TO USE, IF IT IS USING ANOTHER DATABASE 

---- CREATING MULTIPLE TABLES --------
CREATE TABLE customers (
cust_id INT AUTO_INCREMENT PRIMARY KEY,
fname VARCHAR(30),
lname VARCHAR(30),
email_id VARCHAR(50),
join_date DATE
);

CREATE TABLE products(
product_id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(50),
category VARCHAR(50),
price DECIMAL(10,2)
);
CREATE TABLE orders(
order_id INT AUTO_INCREMENT PRIMARY KEY,
cust_id INT,
order_date DATE,
CONSTRAINT FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
);
CREATE TABLE order_items(
order_id INT,
product_id INT,
quantity INT,
unit_price DECIMAL(10,2),
PRIMARY KEY (order_id, product_id),
CONSTRAINT FOREIGN KEY (order_id) REFERENCES orders(order_id),
CONSTRAINT FOREIGN KEY (product_id) REFERENCES products(product_id)
);
CREATE TABLE returns(
return_id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT,
product_id INT,
return_date DATE,
reason VARCHAR(100),
CONSTRAINT FOREIGN KEY (order_id, product_id) REFERENCES order_items(order_id, product_id)
);

----- POPULATING DATA INTO CREATED TABLES-----
INSERT INTO customers (fname, lname, email_id, join_date) VALUES
('John', 'Doe', 'john.doe@gmail.com', '2025-03-01'),
('Jane', 'Smith', 'jane.smith@yahoo.com', '2025-03-05'),
('Alice', 'Johnson', 'alice.j@gmail.com', '2025-03-15'),
('Bob', 'Williams', 'bob.w@hotmail.com', '2025-03-20'),
('Eve', 'Brown', 'eve.b@rediff.com', '2025-04-01'),
('Charlie', 'Davis', 'charlie.d@protonmail.com', '2025-04-10'),
('Grace', 'Miller', 'grace.m@gmail.com', '2025-04-12'),
('David', 'Wilson', 'david.w@gmail.com', '2025-04-20'),
('Olivia', 'Moore', 'olivia.m@gmail.com', '2025-04-25'),
('Liam', 'Taylor', 'liam.t@outlook.com', '2025-05-01'),
('Sophia', 'Anderson', 'sophia.a@gmail.com', '2025-05-05'),
('Mason', 'Thomas', 'mason.t@gmail.com', '2025-05-08'),
('Isabella', 'Jackson', 'isabella.j@gmail.com', '2025-05-12'),
('Lucas', 'White', 'lucas.w@gmail.com', '2025-05-20'),
('Mia', 'Harris', 'mia.h@gmail.com', '2025-05-25');

INSERT INTO products (name, category, price) VALUES
('iPhone 15', 'Electronics', 1200.00),
('Samsung TV', 'Electronics', 800.00),
('HP Laptop', 'Electronics', 1000.00),
('Office Chair', 'Furniture', 150.00),
('Dining Table', 'Furniture', 400.00),
('Nike Shoes', 'Apparel', 120.00),
('Adidas Jacket', 'Apparel', 90.00),
('Bluetooth Headphones', 'Accessories', 60.00),
('Wrist Watch', 'Accessories', 200.00),
('Coffee Maker', 'Appliances', 85.00);

INSERT INTO orders (cust_id, order_date) VALUES
(1, '2025-05-01'), (2, '2025-05-02'), (3, '2025-05-03'),
(4, '2025-05-05'), (5, '2025-05-06'), (6, '2025-05-07'),
(7, '2025-05-08'), (8, '2025-05-09'), (9, '2025-05-10'),
(10, '2025-05-12'), (11, '2025-05-15'), (12, '2025-05-16'),
(13, '2025-05-18'), (14, '2025-05-20'), (15, '2025-05-22'),
(1, '2025-06-01'), (3, '2025-06-03'), (5, '2025-06-04'),
(7, '2025-06-05'), (9, '2025-06-06'), (11, '2025-06-07'),
(13, '2025-06-10'), (15, '2025-06-12'), (2, '2025-06-15'),
(4, '2025-06-18');

INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
(1,1,1,1200.00), (1,8,2,60.00),
(2,4,1,150.00),
(3,2,1,800.00), (3,7,1,90.00),
(4,6,2,120.00),
(5,5,1,400.00), (5,10,1,85.00),
(6,9,1,200.00),
(7,3,1,1000.00), (7,8,1,60.00),
(8,4,1,150.00),
(9,6,1,120.00), (9,9,1,200.00),
(10,2,1,800.00),
(11,1,1,1200.00), (11,8,1,60.00),
(12,5,1,400.00),
(13,3,1,1000.00), (13,10,1,85.00),
(14,7,2,90.00),
(15,9,1,200.00),
(16,1,1,1200.00), (16,6,1,120.00),
(17,2,1,800.00),
(18,5,1,400.00),
(19,8,3,60.00),
(20,10,1,85.00),
(21,4,1,150.00), (21,7,1,90.00),
(22,3,1,1000.00),
(23,9,1,200.00),
(24,6,1,120.00),
(25,8,1,60.00);

INSERT INTO returns (order_id, product_id, return_date, reason) VALUES
(1,8,'2025-06-03','Defective item'),
(5,10,'2025-06-06','Not as described'),
(9,6,'2025-06-11','Wrong size'),
(13,10,'2025-06-15','Did not like'),
(20,10,'2025-06-20','Stopped working');

/*QUERIES*/

/*HOW MANY RECORDS ARE IN EACH TABLE*/
SELECT 'customers' AS table_name, COUNT(*) AS total_rows FROM customers
UNION ALL
select 'products', COUNT(*) FROM products
union all
select 'orders', count(*) from orders
union all
select 'order_items', count(*) from order_items
union all
select 'returns', count(*) from returns;

										
/*TOTAL SALES REVENUE BY MONTH*/
SELECT 
    EXTRACT(MONTH FROM o.order_date) AS MONTH,
    SUM(oi.unit_price * oi.quantity) AS Total_Revenue
FROM
    orders o
        INNER JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY MONTH;
								/*OR*/
SELECT 
    DATE_FORMAT(o.order_date, '%Y-%M') ORDERED_MONTH,
    SUM(oi.unit_price * oi.quantity) AS Total_Revenue
FROM
    orders o
        INNER JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY ORDERED_MONTH;

/*TOP 5 CUSTOMERS BY TOTAL SPENDING*/
SELECT 
    c.cust_id,
    CONCAT(c.fname, ' ', c.lname) FullName,
    c.email_id,
    SUM(oi.unit_price * oi.quantity) AS Tota_spent
FROM
    customers c
        INNER JOIN
    orders o ON c.cust_id = o.cust_id
        INNER JOIN
    order_items oi ON o.order_id = oi.order_id
        INNER JOIN
    products p ON p.product_id = oi.product_id
GROUP BY cust_id
ORDER BY SUM(oi.unit_price * oi.quantity) DESC
LIMIT 5;

/*MOST RETURNED PRODUCTS*/
SELECT 
    p.product_id, p.name, COUNT(r.return_id) AS total_returned
FROM
    products p
        JOIN
    returns r ON p.product_id = r.product_id
GROUP BY p.product_id , p.name
ORDER BY total_returned DESC;

/*Products generating highest total revenue*/
SELECT 
    p.product_id,
    p.name,
    SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM
    products p
        INNER JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_id , p.name
ORDER BY total_revenue DESC;
SELECT 
    p.product_id,
    p.name,
    AVG(oi.quantity * oi.unit_price) AS total_revenue
FROM
    products p
        INNER JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_id , p.name
ORDER BY total_revenue DESC;

/*Customers who returned products (and how many times)*/
SELECT 
    c.cust_id,
    CONCAT(c.fname, ' ', c.lname) FullName,
    COUNT(r.return_id) How_ManyTimes
FROM
    customers c
        INNER JOIN
    orders o ON c.cust_id = o.cust_id
        INNER JOIN
    returns r ON r.order_id = o.order_id
GROUP BY c.cust_id
ORDER BY How_ManyTimes DESC;

/*Monthly Return Rate (% of orders that had returns)*/
SELECT 
    DATE_FORMAT(o.order_date, '%Y-%m') AS month,
    COUNT(DISTINCT o.order_id) AS total_orders,
    COUNT(DISTINCT r.order_id) AS returned_orders,
    ROUND(COUNT(DISTINCT r.order_id) / COUNT(DISTINCT o.order_id) * 100,
            2) AS return_rate_percent
FROM
    orders o
        LEFT JOIN
    returns r ON o.order_id = r.order_id
GROUP BY DATE_FORMAT(o.order_date, '%Y-%m')
ORDER BY month;

/*Most sold product in each category*/
WITH product_sales AS 
(
SELECT p.product_id, p.name, p.category, SUM(oi.quantity) Total_sold
FROM products p JOIN order_items oi
ON p.product_id = oi.product_id
group by p.product_id, p.name, p.category
),
ranked_sales AS 
(
SELECT *, rank() over(partition by category ORDER BY Total_sold DESC) AS rnk
FROM product_sales
)
SELECT product_id, name, category, rnk
FROM ranked_sales
WHERE rnk = 1;

/* Find products that have been ordered but never returned.*/
TABLE products;
TABLE order_items;
TABLE returns;
SELECT DISTINCT
    p.product_id, p.name, p.category
FROM
    products p
        INNER JOIN
    order_items oi ON p.product_id = oi.product_id
        LEFT JOIN
    returns r ON oi.order_id = r.order_id
        AND oi.product_id = r.product_id
WHERE
    r.return_id IS NULL;
